https://leetcode.com/problems/binary-tree-maximum-path-sum/description/


//  ALso the path need not be root to leaf only

// we can end at any point

// let ssay I have something like this

//              20 
//             /  \
//         30        40
//         /        /  \
//     50       -15      -18  

// so  the max path can be  50-30-20-40

// so i need information of 

// left subtreesum, right subtree sum, if i consider root

// for 40 -> I need info of ( Lsubsum = -15 ,
//                             RsubSum = -18,
//                             lsum+rsum+root (40 + (-15) + (-18)) , 
//                             only root 40 )

// 4th condition  - only root-> arrises when both LST and RST sums have -ve values and root has +ve val
// instead of considering the neg children, I might as well consider till only parent
// and not go beyond it.



// This code wont work bcause its considering only 3 and not
//  the just root condition



    // int maxSum=INT_MIN;
    // int maxPathSum(TreeNode* root) {
        
    //      if(root==NULL) return 0;
        
    //     int lsum=maxPathSum(root->left);
    //     int rsum=maxPathSum(root->right);
    
    //     maxSum = max(maxSum,(lsum+rsum+root->val));
        
    //     return  root->val + max(lsum,rsum);
    // }


class Solution {
public:
    int maxSum=INT_MIN;

 int pathSum(TreeNode* root) {
        
         if(root==NULL) return 0;
        
        int lsum=pathSum(root->left);
        int rsum=pathSum(root->right);

        if(lsum<0)
           lsum=0;

        if(rsum<0)
          rsum=0;   
    
        maxSum = max(maxSum,lsum+rsum+root->val);
        
        return  root->val + max(lsum,rsum);
    }


    int maxPathSum(TreeNode* root) {

        pathSum(root);
        return maxSum;
    }

};
