/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int countSwaps(vector<int> arr){

        vector<int> sortedArr(arr.begin(),arr.end());
        sort(sortedArr.begin(),sortedArr.end());
        int swaps=0;

        unordered_map<int,int> mp;

        for(int i=0;i<arr.size();i++){
            mp[arr[i]]=i;
        }

        for(int i=0;i<arr.size();i++){

            if(arr[i]!=sortedArr[i]){
                swaps++;

               int idx = mp[sortedArr[i]];
               mp[arr[i]] = idx;
               swap(arr[i],arr[idx]);
            
            }

        }

        return swaps;

    }


    int minimumOperations(TreeNode* root) {

        int count=0;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){

            int size=q.size();
            vector<int> tmp;
            for(int i=1;i<=size;i++){

                auto front = q.front();
                q.pop();

                tmp.push_back(front->val);

                if(front->left)
                 q.push(front->left);

                if(front->right)
                 q.push(front->right); 
            }

            count+=countSwaps(tmp);

        } 

        return count;
    }
};
