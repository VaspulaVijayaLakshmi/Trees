
        //why are we maintaining hashmap instead of
        //vector
        //->its because we are not of value of node and they are not in order
        //so we cant predict the size of vector
        //to initlize the vector with default size like vis(100001)
        //the given value is 10^5
        //so space issues

//similar to Rotten oranges

class Solution {
    
private:
    //adjacency list
    unordered_map<int,vector<int>> adj; 
     
    void createGraph(TreeNode* root){

        if(root==NULL) return ;

        if(root->left){
           adj[root->val].push_back(root->left->val);
           adj[root->left->val].push_back(root->val); 
        }

        if(root->right){
            adj[root->right->val].push_back(root->val);
            adj[root->val].push_back(root->right->val);
        }

        createGraph(root->left);
        createGraph(root->right);

        
    }
    
public:
    int amountOfTime(TreeNode* root, int start) {
   
        createGraph(root);  

        queue<int> q;
        q.push(start);
        
        // since we dont know the values of nodes,we use unordered_map
         unordered_map <int,bool> vis;
         vis[start]=true;

         int mins=0;

         while(!q.empty()){
          
          int sz=q.size();

          while(sz--){

            int front=q.front();
            q.pop();

            vis[front]=true;

            for(int child:adj[front]){
                  
                  if(!vis[child]){
                    vis[child]=true;
                    q.push(child);
                  }
            }

          }


          mins++;

         }


         return mins-1;
        
    }
};
