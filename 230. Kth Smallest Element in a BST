/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int nodes= 0; 
    int ans=0;

    void kthSmall(TreeNode* root,int k) {

        if(root==NULL) return ;

        kthSmall(root->left,k);
        
        nodes++;
        if(nodes==k)   ans= root->val;

        kthSmall(root->right,k);
        
    }


    int kthSmallest(TreeNode* root, int k) {

         kthSmall(root,k);
         return ans;
       
    }
};


// we can traverse the entire array, and get preorder - sorted list and return Kth leemnet
// or we can do preorder-traversal and return n-kth elemnt

// do preorder reverse and return Kth elemnt
