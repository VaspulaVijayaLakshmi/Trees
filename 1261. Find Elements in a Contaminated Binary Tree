/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class FindElements {
public: 
    TreeNode* tree=NULL;
    unordered_set<int> st;
    void buildRecoverTree(TreeNode* root,int val){

        if(root==NULL)
           return ;

         root->val = val;  
         st.insert(root->val);
          
          if(root->left)
             buildRecoverTree(root->left,val*2+1);

          if(root->right)   
             buildRecoverTree(root->right,val*2+2);   
         
    }

    FindElements(TreeNode* root) { 
      tree = root;
      buildRecoverTree(tree,0);      
    }
    
    bool find(int target) {

          if(st.find(target)==st.end())
           return false;

          return true;         
    }
};

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements* obj = new FindElements(root);
 * bool param_1 = obj->find(target);
 */
