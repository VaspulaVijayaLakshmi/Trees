//https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/
//similar question



// when the nodes are not from 1 to n-1
// use unordered_map

// Since we dont know what are the values of nodes, use unordered_map for 
// vis

class Solution {

   unordered_map<TreeNode*, vector<TreeNode*>> adj;
   unordered_map<int,bool> vis;

   void createGraph(TreeNode* root){

    if(root==NULL) return ;

     if(root->left){
       adj[root->left].push_back(root);
       adj[root].push_back(root->left);
     }

     if(root->right){
      adj[root->right].push_back(root);
      adj[root].push_back(root->right);
     }

      createGraph(root->left);
      createGraph(root->right);

   } 

public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {

    //    create graph
        createGraph(root);

        queue<TreeNode*> q;
        q.push(target);
        vis[target->val]=true;

        int level=0;

        while(!q.empty()){

        if(level==k) break;

        int sz=q.size();
        while(sz--){    
          
        auto front=q.front();
        q.pop();

        for(auto child: adj[front]){

            if(!vis[child->val])
              q.push(child);
        } 

        } 

         level++;

        }



        vector<int> res;
        while(!q.empty()){
            res.push_back(q.front()->val);
            q.pop();
        }

        return res;

    }

};
