
// so we can normally count it.
// But then it takes O(N) complexity, 
// we need to take advatage of completeness of a binary tree
// since we already know its a complete BT 




// Here we are should not calculate height like our normal appraoch

// because lets says, we have this
 
//                       2
//                       /\
//              5                 6  
//              /\                /\
//         7          8         9   10
//         /\         /
//     11    12    13  



//     so if we consider root 5

//     its LH and RH if we calculate traditionally,its still the same - 2(excluding 5)

//     but the no.of nodes are not equal, so for lH and Rh we cant calculate height, 
//     we need to calculate their completeness.

//     that is left trees left most nodes are euqal to right trees right most nodes


//     A tree is complete when , 

//               5           
//              /\                
//         7          8        
//         /\         /\
//     11    12    13   14


//     5->7->11 == 5->8->14 this is complete tree


//               5           
//              /\                
//         7          8        
//         /\         /\
//     11    12    13   

// 5->7->11 != 5->8 

// this is not complete tree and one node is missing



class Solution {
public:

    int getLH(TreeNode* root){
        
        int c=0;
        while(root!=NULL){
            root=root->left;
            c++;
        }
        return c;
    }

    int getRH(TreeNode* root){

        int c=0;
        while(root!=NULL){
            root=root->right;
            c++;
        }
        return c;
    }



   int nodes(TreeNode* root){

    if(root==NULL) return 0;

    // Get left height of tree and right height of tree
    // if they are same, we dont have to traverse further down anymore , 
    // we can just return 2^ht of elements

    int lht = getLH(root->left);
    int rht = getRH(root->right);

// subtree is complete BT
    if(lht==rht)
     return  pow(2,lht+1) -1 ;
    

    // else keep gng down until they both are equal,
    // then when it returns the node count, we will keep adding 1 and returning until root
     return 1 + nodes(root->left) + nodes(root->right);

   }



    int countNodes(TreeNode* root) {
       return nodes(root);
    }


};



};
